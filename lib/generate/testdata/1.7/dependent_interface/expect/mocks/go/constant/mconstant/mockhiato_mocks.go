package mconstant

// Code generated by Mockhiato. DO NOT EDIT.
import (
	mock "github.com/stretchr/testify/mock"
	constant "go/constant"
)

// NewValueMock creates a new ValueMock
func NewValueMock() *ValueMock { return &ValueMock{} }

// ValueMock implements mconstant.Value
type ValueMock struct{ mock.Mock }

// ExactString implements (mconstant.Value).ExactString
func (r *ValueMock) ExactString() string {
	ret := r.Called()
	var ret0 string
	if a := ret.Get(0); a != nil {
		ret0 = a.(string)
	}
	return ret0
}

// Kind implements (mconstant.Value).Kind
func (r *ValueMock) Kind() constant.Kind {
	ret := r.Called()
	var ret0 constant.Kind
	if a := ret.Get(0); a != nil {
		ret0 = a.(constant.Kind)
	}
	return ret0
}

// String implements (mconstant.Value).String
func (r *ValueMock) String() string {
	ret := r.Called()
	var ret0 string
	if a := ret.Get(0); a != nil {
		ret0 = a.(string)
	}
	return ret0
}

// implementsValue implements (mconstant.Value).implementsValue
func (r *ValueMock) implementsValue() {
	r.Called()
	return
}
