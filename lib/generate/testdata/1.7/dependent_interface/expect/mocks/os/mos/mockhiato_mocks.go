package mos

// Code generated by Mockhiato. DO NOT EDIT.
import (
	mock "github.com/stretchr/testify/mock"
	os "os"
	time "time"
)

// NewFileInfoMock creates a new FileInfoMock
func NewFileInfoMock() *FileInfoMock { return &FileInfoMock{} }

// FileInfoMock implements mos.FileInfo
type FileInfoMock struct{ mock.Mock }

// IsDir implements (mos.FileInfo).IsDir
func (r *FileInfoMock) IsDir() bool {
	ret := r.Called()
	var ret0 bool
	if a := ret.Get(0); a != nil {
		ret0 = a.(bool)
	}
	return ret0
}

// ModTime implements (mos.FileInfo).ModTime
func (r *FileInfoMock) ModTime() time.Time {
	ret := r.Called()
	var ret0 time.Time
	if a := ret.Get(0); a != nil {
		ret0 = a.(time.Time)
	}
	return ret0
}

// Mode implements (mos.FileInfo).Mode
func (r *FileInfoMock) Mode() os.FileMode {
	ret := r.Called()
	var ret0 os.FileMode
	if a := ret.Get(0); a != nil {
		ret0 = a.(os.FileMode)
	}
	return ret0
}

// Name implements (mos.FileInfo).Name
func (r *FileInfoMock) Name() string {
	ret := r.Called()
	var ret0 string
	if a := ret.Get(0); a != nil {
		ret0 = a.(string)
	}
	return ret0
}

// Size implements (mos.FileInfo).Size
func (r *FileInfoMock) Size() int64 {
	ret := r.Called()
	var ret0 int64
	if a := ret.Get(0); a != nil {
		ret0 = a.(int64)
	}
	return ret0
}

// Sys implements (mos.FileInfo).Sys
func (r *FileInfoMock) Sys() interface{} {
	ret := r.Called()
	var ret0 interface{}
	if a := ret.Get(0); a != nil {
		ret0 = a.(interface{})
	}
	return ret0
}
