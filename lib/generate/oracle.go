package generate

import (
	"bufio"
	"go/ast"
	"go/importer"
	"go/parser"
	"go/token"
	"go/types"
	"os"
	"path/filepath"
	"strings"

	"gitlab.com/littledot/mockhiato/lib"
	"gitlab.com/littledot/mockhiato/lib/plugin/github.com/stretchr/testify"

	"github.com/davecgh/go-spew/spew"
)

func Run() {
	projectPath, err := os.Getwd()
	if err != nil {
		panic(err)
	}

	oracle := &Oracle{}
	oracle.Formatter = testify.NewTestifyFormatter()

	project := oracle.ScanProject(projectPath)
	spec := oracle.TypeCheckProject(project)
	oracle.GenerateMocks(spec)
}

// Oracle parses Go projects, looking for interfaces to mock.
type Oracle struct {
	lib.Formatter
}

// ScanProject walks the project directory, indexing valid Go source code
func (r *Oracle) ScanProject(projectPath string) *lib.Project {
	project := lib.NewProject()
	err := filepath.Walk(projectPath, func(filePath string, info os.FileInfo, err error) error {
		if err != nil { // Something wrong? Skip
			return nil
		}
		if !strings.HasSuffix(filePath, ".go") { // Not Go source? Skip
			return nil
		}
		if strings.HasSuffix(filePath, "_test.go") { // Go test? Skip
			return nil
		}

		rel, err := filepath.Rel(projectPath, filePath)
		if err != nil {
			return nil
		}
		if strings.HasPrefix(rel, "vendor") { // Vendor directories? Skip TODO: make this configurable
			return filepath.SkipDir
		}

		// Check source for Mockhiato magic string
		file, err := os.Open(filePath)
		if err != nil {
			return nil
		}
		defer file.Close()
		fileScanner := bufio.NewScanner(file)
		for i := 0; i < 6 && fileScanner.Scan(); i++ { // Check first 5 lines or EOF
			line := fileScanner.Text()
			if strings.HasPrefix(line, "//") { // Check 1st comment, which should be the 3rd line
				if line == "// Auto-generated by mockhiato" { // Found magic string? Skip
					return nil
				}
				break
			}
		}

		dirPath := filepath.Dir(filePath)
		project.SourceSet[dirPath] = append(project.SourceSet[dirPath], filePath)
		return nil
	})
	if err != nil {
		panic(err)
	}
	return project
}

func (r *Oracle) TypeCheckProject(project *lib.Project) *lib.Spec {
	spec := &lib.Spec{}
	for _, sources := range project.SourceSet {
		pack := r.typeCheckSources(sources)
		spec.Packages = append(spec.Packages, pack)
	}
	return spec
}

func (r *Oracle) typeCheckSources(sources []string) *lib.Package {
	// Build package AST from sources
	fset := token.NewFileSet()
	astFiles := []*ast.File{}
	for _, source := range sources {
		astFile, err := parser.ParseFile(fset, source, nil, parser.AllErrors)
		if err != nil {
			panic(err)
		}
		astFiles = append(astFiles, astFile)
	}

	// Type-check package AST
	typeChecker := &types.Config{
		Importer: importer.Default(),
	}
	info := &types.Info{
		Defs: map[*ast.Ident]types.Object{},
		Uses: map[*ast.Ident]types.Object{},
	}
	if _, err := typeChecker.Check("", fset, astFiles, info); err != nil {
		panic(err)
	}

	pack := &lib.Package{}

	// Index interfaces defined in the package
	for _, def := range info.Defs {
		if def == nil {
			continue
		}
		if _, ok := def.(*types.TypeName); !ok {
			continue
		}
		if !types.IsInterface(def.Type()) {
			continue
		}

		interfaceDef := def.Type().Underlying().(*types.Interface).Complete()
		iface := &lib.Interface{
			Object:    def,
			Interface: interfaceDef,
		}
		spew.Printf("Found Interface %s with %d func\n", def.Name(), interfaceDef.NumMethods())
		pack.Interfaces = append(pack.Interfaces, iface)
	}

	// Index imports used by the package
	for _, use := range info.Uses {
		pkgNameUse, ok := use.(*types.PkgName)
		if !ok {
			continue
		}
		pack.Imports = append(pack.Imports, pkgNameUse.Imported())
	}

	return pack
}
