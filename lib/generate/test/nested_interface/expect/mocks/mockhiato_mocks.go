package mocks

// Auto-generated by Mockhiato
import (
	mock "github.com/stretchr/testify/mock"
	net "net"
	time "time"
)

// AddrMock implements mocks.Addr
type AddrMock struct{ mock.Mock }

// Network implements (mocks.Addr).Network
func (r *AddrMock) Network() string {
	ret := r.Called()
	var ret0 string
	if a := ret.Get(0); a != nil {
		ret0 = a.(string)
	}
	return ret0
}

// String implements (mocks.Addr).String
func (r *AddrMock) String() string {
	ret := r.Called()
	var ret0 string
	if a := ret.Get(0); a != nil {
		ret0 = a.(string)
	}
	return ret0
}

// ConnMock implements mocks.Conn
type ConnMock struct{ mock.Mock }

// Close implements (mocks.Conn).Close
func (r *ConnMock) Close() error {
	ret := r.Called()
	var ret0 error
	if a := ret.Get(0); a != nil {
		ret0 = a.(error)
	}
	return ret0
}

// LocalAddr implements (mocks.Conn).LocalAddr
func (r *ConnMock) LocalAddr() net.Addr {
	ret := r.Called()
	var ret0 net.Addr
	if a := ret.Get(0); a != nil {
		ret0 = a.(net.Addr)
	}
	return ret0
}

// Read implements (mocks.Conn).Read
func (r *ConnMock) Read(p0 []byte) (int, error) {
	ret := r.Called(p0)
	var ret0 int
	if a := ret.Get(0); a != nil {
		ret0 = a.(int)
	}
	var ret1 error
	if a := ret.Get(1); a != nil {
		ret1 = a.(error)
	}
	return ret0, ret1
}

// RemoteAddr implements (mocks.Conn).RemoteAddr
func (r *ConnMock) RemoteAddr() net.Addr {
	ret := r.Called()
	var ret0 net.Addr
	if a := ret.Get(0); a != nil {
		ret0 = a.(net.Addr)
	}
	return ret0
}

// SetDeadline implements (mocks.Conn).SetDeadline
func (r *ConnMock) SetDeadline(p0 time.Time) error {
	ret := r.Called(p0)
	var ret0 error
	if a := ret.Get(0); a != nil {
		ret0 = a.(error)
	}
	return ret0
}

// SetReadDeadline implements (mocks.Conn).SetReadDeadline
func (r *ConnMock) SetReadDeadline(p0 time.Time) error {
	ret := r.Called(p0)
	var ret0 error
	if a := ret.Get(0); a != nil {
		ret0 = a.(error)
	}
	return ret0
}

// SetWriteDeadline implements (mocks.Conn).SetWriteDeadline
func (r *ConnMock) SetWriteDeadline(p0 time.Time) error {
	ret := r.Called(p0)
	var ret0 error
	if a := ret.Get(0); a != nil {
		ret0 = a.(error)
	}
	return ret0
}

// Write implements (mocks.Conn).Write
func (r *ConnMock) Write(p0 []byte) (int, error) {
	ret := r.Called(p0)
	var ret0 int
	if a := ret.Get(0); a != nil {
		ret0 = a.(int)
	}
	var ret1 error
	if a := ret.Get(1); a != nil {
		ret1 = a.(error)
	}
	return ret0, ret1
}

// errorMock implements mocks.error
type errorMock struct{ mock.Mock }

// Error implements (mocks.error).Error
func (r *errorMock) Error() string {
	ret := r.Called()
	var ret0 string
	if a := ret.Get(0); a != nil {
		ret0 = a.(string)
	}
	return ret0
}
