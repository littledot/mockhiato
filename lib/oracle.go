package lib

import (
	"bufio"
	"bytes"
	"fmt"
	"go/ast"
	"go/importer"
	"go/parser"
	"go/token"
	"go/types"
	"os"
	"os/exec"
	"path/filepath"
	"strconv"
	"strings"

	"github.com/davecgh/go-spew/spew"
)

// Oracle parses Go projects, looking for interfaces to mock.
type Oracle struct {
}

func Run() {
	projectPath, err := os.Getwd()
	if err != nil {
		panic(err)
	}

	oracle := &Oracle{}
	project := oracle.ScanProject(projectPath)
	spec := oracle.TypeCheckProject(project)
	oracle.GenerateMocks(spec)
}

type Project struct {
	SourceSet map[string][]string
}

func NewProject() *Project {
	return &Project{
		SourceSet: map[string][]string{},
	}
}

// ScanProject walks the project directory, indexing valid Go source code
func (r *Oracle) ScanProject(projectPath string) *Project {
	project := NewProject()
	err := filepath.Walk(projectPath, func(filePath string, info os.FileInfo, err error) error {
		if err != nil { // Something wrong? Skip
			return nil
		}
		if !strings.HasSuffix(filePath, ".go") { // Not Go source? Skip
			return nil
		}
		if strings.HasSuffix(filePath, "_test.go") { // Go test? Skip
			return nil
		}

		rel, err := filepath.Rel(projectPath, filePath)
		if err != nil {
			return nil
		}
		if strings.HasPrefix(rel, "vendor") { // Vendor directories? Skip TODO: make this configurable
			return filepath.SkipDir
		}

		// Check source for Mockhiato magic string
		file, err := os.Open(filePath)
		if err != nil {
			return nil
		}
		defer file.Close()
		fileScanner := bufio.NewScanner(file)
		for i := 0; i < 6 && fileScanner.Scan(); i++ { // Check first 5 lines or EOF
			line := fileScanner.Text()
			if strings.HasPrefix(line, "//") { // Check 1st comment, which should be the 3rd line
				if line == "// Auto-generated by mockhiato" { // Found magic string? Skip
					return nil
				}
				break
			}
		}

		dirPath := filepath.Dir(filePath)
		project.SourceSet[dirPath] = append(project.SourceSet[dirPath], filePath)
		return nil
	})
	if err != nil {
		panic(err)
	}
	return project
}

type Spec struct {
	Packages []*Package
}

type Package struct {
	Interfaces []*Interface
	Imports    []*types.Package
}

type Interface struct {
	Object    types.Object
	Interface *types.Interface
}

func (r *Oracle) TypeCheckProject(project *Project) *Spec {
	spec := &Spec{}
	for _, sources := range project.SourceSet {
		pack := r.typeCheckSources(sources)
		spec.Packages = append(spec.Packages, pack)
	}
	return spec
}

func (r *Oracle) typeCheckSources(sources []string) *Package {
	// Build package AST from sources
	fset := token.NewFileSet()
	astFiles := []*ast.File{}
	for _, source := range sources {
		astFile, err := parser.ParseFile(fset, source, nil, parser.AllErrors)
		if err != nil {
			panic(err)
		}
		astFiles = append(astFiles, astFile)
	}

	// Type-check package AST
	typeChecker := &types.Config{
		Importer: importer.Default(),
	}
	info := &types.Info{
		Defs: map[*ast.Ident]types.Object{},
		Uses: map[*ast.Ident]types.Object{},
	}
	if _, err := typeChecker.Check("", fset, astFiles, info); err != nil {
		panic(err)
	}

	pack := &Package{}

	// Index interfaces defined in the package
	for _, def := range info.Defs {
		if def == nil {
			continue
		}
		if _, ok := def.(*types.TypeName); !ok {
			continue
		}
		if !types.IsInterface(def.Type()) {
			continue
		}

		interfaceDef := def.Type().Underlying().(*types.Interface).Complete()
		iface := &Interface{
			Object:    def,
			Interface: interfaceDef,
		}
		spew.Printf("Found Interface %s with %d func\n", def.Name(), interfaceDef.NumMethods())
		pack.Interfaces = append(pack.Interfaces, iface)
	}

	// Index imports used by the package
	for _, use := range info.Uses {
		pkgNameUse, ok := use.(*types.PkgName)
		if !ok {
			continue
		}
		pack.Imports = append(pack.Imports, pkgNameUse.Imported())
	}

	return pack
}

func (r *Oracle) GenerateMocks(spec *Spec) {
	for _, pack := range spec.Packages {
		r.generateMock(pack)
	}
}

func (r *Oracle) generateMock(pack *Package) {
	if len(pack.Interfaces) == 0 { // Nothing to mock? Return early
		return
	}

	// Create file {package_name}_mocks.go
	if err := os.MkdirAll("mocks", os.ModeDir); err != nil {
		panic(err)
	}
	pkgName := pack.Interfaces[0].Object.Pkg().Name()
	mockPath := fmt.Sprintf("mocks/%s_mocks.go", strings.Replace(pkgName, "/", "_", -1))
	mockFile, err := os.Create(mockPath)
	if err != nil {
		panic(err)
	}
	defer mockFile.Close()

	buf := &bytes.Buffer{}

	// Write package
	buf.WriteString("package mocks\n")

	// Write magic string
	buf.WriteString("// Auto-generated by mockhiato\n")

	// Write imports
	imports := []string{`"github.com/stretchr/testify/mock"`}
	for _, imported := range pack.Imports {
		imports = append(imports, strconv.Quote(imported.Path()))
	}
	buf.WriteString("import(\n")
	buf.WriteString(strings.Join(imports, "\n"))
	buf.WriteString("\n)\n")

	for _, iface := range pack.Interfaces {
		// Write struct
		interfaceName := iface.Object.Name()
		buf.WriteString(fmt.Sprintf("// %s implements %s.%s\n", interfaceName, pkgName, interfaceName))
		buf.WriteString(fmt.Sprintf("type %s struct { mock.Mock }\n", interfaceName))

		for i := 0; i < iface.Interface.NumMethods(); i++ {
			// Write method
			method := iface.Interface.Method(i)
			signature := method.Type().(*types.Signature)

			paramNames := []string{}
			paramExprs := []string{}
			for j := 0; j < signature.Params().Len(); j++ {
				param := signature.Params().At(j)
				varName := "p" + strconv.Itoa(j)
				paramNames = append(paramNames, varName)
				paramExprs = append(paramExprs, varName+" "+GetTypeString(param))
			}

			if signature.Variadic() { // Variadic method? Replace last parameter's [] with ... ("p1 []int" -> "p1 ...int")
				pos := signature.Params().Len() - 1
				paramExprs[pos] = strings.Replace(paramExprs[pos], "[]", "...", -1)
			}

			returnNames := []string{}
			returnTypes := []string{}
			verifyReturnLines := []string{}
			for j := 0; j < signature.Results().Len(); j++ {
				result := signature.Results().At(j)
				varName := "ret" + strconv.Itoa(j)
				returnNames = append(returnNames, varName)
				returnTypes = append(returnTypes, GetTypeString(result))
				verifyReturnLines = append(verifyReturnLines, fmt.Sprintf("%s := ret.Get(%d).(%s)\n", varName, j, GetTypeString(result)))
			}

			commentLine := fmt.Sprintf("// %s implements (%s.%s).%s\n", method.Name(), pkgName, interfaceName, method.Name())
			signatureLine := fmt.Sprintf("func (r *%s) %s(%s) (%s) {\n", interfaceName, method.Name(), strings.Join(paramExprs, ", "), strings.Join(returnTypes, ","))
			verifyInvokedLine := fmt.Sprintf("r.Called(%s)\n", strings.Join(paramNames, ", "))
			if signature.Params().Len() > 0 {
				verifyInvokedLine = "ret := " + verifyInvokedLine
			}
			returnLine := fmt.Sprintf("return %s\n}\n", strings.Join(returnNames, ", "))

			buf.WriteString(commentLine)
			buf.WriteString(signatureLine)
			buf.WriteString(verifyInvokedLine)
			for _, verifyReturnLine := range verifyReturnLines {
				buf.WriteString(verifyReturnLine)
			}
			buf.WriteString(returnLine)
		}

	}

	mockFile.Write(buf.Bytes())
	mockFile.Close()

	// Format generated code
	cmd := exec.Command("goimports", "-w", mockPath)
	if stdout, e := cmd.CombinedOutput(); e != nil {
		panic(stdout)
	}
}

func GetTypeString(obj types.Object) string {
	spew.Dump(obj.Type())
	buf := &bytes.Buffer{}
	getTypeString(buf, obj.Type())
	return buf.String()
}

func getTypeString(buf *bytes.Buffer, obj types.Type) {
	switch objType := obj.(type) {
	case *types.Pointer:
		splits := strings.Split(objType.Elem().String(), "/")
		buf.WriteString("*")
		buf.WriteString(splits[len(splits)-1])
	case *types.Slice:
		buf.WriteString("[]")
		getTypeString(buf, objType.Elem())
	default:
		buf.WriteString(objType.String())
	}
}
